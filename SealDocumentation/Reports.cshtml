@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Reports";
}

<div id="wrapper">
    <div class="container">
        <section id="top" class="section docs-heading"></section>
        <!-- end section -->
        <div class="row">
            <div class="col-md-3">
                <nav class="docs-sidebar" data-spy="affix" data-offset-top="100" data-offset-bottom="200" role="navigation">
                    <ul class="nav">
                        <li>
                            <a href="#lineModels">Models</a>
                            <ul class="nav">
                                <li><a href="#lineModels_1">Definition</a></li>
                                <li><a href="#lineModels_2">Elements</a></li>
                                <li><a href="#lineModels_3">Restrictions</a></li>
                                <li><a href="#lineModels_4">Charts</a></li>
                                <li><a href="#lineModels_5">SQL Model</a></li>
                            </ul>
                        </li>
                        <li>
                            <a href="#lineViews">Views</a>
                            <ul class="nav">
                                <li><a href="#lineViews_1">Templates</a></li>
                                <li><a href="#lineViews_2">Widget Publication</a></li>
                            </ul>
                        </li>
                        <li>
                            <a href="#lineOutput">Output and Schedules</a>
                            <ul class="nav">
                                <li><a href="#lineOutput_1">Devices</a></li>
                                <li><a href="#lineOutput_2">Schedules</a></li>
                            </ul>
                        </li>
                        <li><a href="#lineTasks">Tasks</a></li>
                        <li><a href="#lineInputs">Input Values</a></li>
                        <li>
                            <a href="#lineConverter">Converter</a>
                            <ul class="nav">
                                <li><a href="#lineConverter_1">PDF</a></li>
                                <li><a href="#lineConverter_2">Excel</a></li>
                            </ul>
                        </li>
                        <li><a href="#lineCopy">Smart Copy</a></li>
                        <li><a href="#lineExecution">Execution Steps</a></li>
                    </ul>
                    <img src="Images/Seal-Report-Logo.png" class="img-thumbnail img-rounded" style="margin-left:20px;" />
                    <p style="margin-left:20px;">
                        <strong><a href="#feed">Feed the Seal ?</a></strong><br />
                        <iframe src="https://ghbtns.com/github-btn.html?user=ariacom&repo=Seal-Report&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe>
                    </p>

                </nav>
            </div>
            <div class="col-md-9">
                <section class="welcome">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Reports<hr></h2>
                            <div class="row">
                                <div class="col-md-12 full">
                                    <p>
                                        A <strong>Report</strong> is edited with the <b>Report Designer</b> and stored in a file (*.srex) either in the <i>/Reports</i> Repository sub-folder or on the file system.<br>
                                        A report references repository <strong>Data Sources</strong> but it may have its own Data Sources definitions.<br />
                                        A report contains <strong>Models</strong> to define how to generate the Result Set (Data Table) and Series from the database.<br />
                                        Once the result got from the database, report <strong>Views</strong> are used to generate a HTML document using Razor parsing and rendering.<br />
                                        In addition, <strong>Outputs</strong> and <strong>Schedules</strong> can be defined to automate report generation (<eg>e.g. Sending an Email every morning</eg>).<br />
                                        Report allows also to perform <strong>Tasks</strong> to execute SQL or Razor Scripts.
                                    </p>
                                </div>
                            </div>
                            <!-- end row -->
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 text-center">
                            <div class="caption">
                                <b>Report Objects</b>
                            </div>
                            <img src="images/CD-Report.png" alt="" class="img-thumbnail img-rounded">
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                </section>
                <section id="lineModels" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Models <hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                A <strong>Model</strong> defines how to build the SQL Select Statement to get the result set from the database.<br />
                                A report can contain several models referencing different data sources (one data source per model).<br />
                                Once got from the database, the result set is processed in a <b>Summary Table</b> and several Pages containing a <b>Page Table</b>, a <b>Data Table</b> and <b>Series</b> if a chart is defined.<br />
                                The <strong>Data Source</strong> chosen defines which elements and restrictions are available to define the model.<br />
                            </p>
                            <div class="bs-callout bs-callout-warning">
                                The SQL generated for a model can be viewed and executed in a normal SQL Editor (<eg>e.g. SQL Management Studio for MS SQLServer</eg>). Just cut and paste your SQL to test it.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12 text-center">
                            <div class="caption">
                                <b>Report Model Objects</b>
                            </div>
                            <img src="images/CD-Report Model.png" alt="" class="img-thumbnail img-rounded">
                        </div>
                        <!-- end col -->
                    </div>
                    <div id="lineModels_1" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Model Definition</h4>
                            <p>
                                Once the <code>Source</code> defined, the <code>Connection</code> can also be chosen for the model.<br />
                                Several scripts allow to modify the model before or after the table is loaded and processed: <code>Pre Load Script</code>, <code>Post Load Script</code>, <code>Final Script</code>.<br />
                                Check <a href="">Scripts</a> for more information and samples.<br />
                                You can also override the default SQL generated with the following properties :
                                <code>Select Clause</code>,<code>From Clause</code>,<code>Order By Clause</code>,<code>Group By Clause</code>,<code>Common Table Expression Clause</code><br />
                            </p>
                            <div class="bs-callout bs-callout-demo">
                                <h4>Samples</h4>
                                In MS MSQLServer, set the <code>Select Clause</code> to <b>SELECT TOP 100</b> to limit the result to 100 records.<br />
                                Add a custom restriction in the <code>From Clause</code> to enhance your SQL performances.<br />
                                Add a column in the <code>Order By Clause</code> to sort the result on a column not shown in the report.<br />
                            </div>
                            <p>
                                Like tables in <strong>Data Source</strong>, <code>Pre/Post SQL Statements</code> can be executed just before and after the SELECT statement is executed.<br />
                                Finally ,the model definition allows to configure build timeout and join preferences, and to edit all the <a href="Sources.cshtml#lineTables_3">Common Restrictions</a> found in the SQL generated for the model (use the property <code>Common Restrictions</code>).
                            </p>
                        </div>
                    </div>
                    <!-- end row -->
                    <div id="lineModels_2" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Elements</h4>
                            <p>
                                The <strong>Data Source</strong> chosen for the model defines the elements available<br />
                                You can drag and drop the elements you want to see in your report in four different panels corresponding to a cross table definition:<br />
                                <b>Row/Column</b> for the dimensions of the result table, <b>Data</b> for the measures aggregated and <b>Page</b> to force a new page per page value.
                            </p>
                            <div class="bs-callout bs-callout-warning">
                                Simply, drag and drop your elements to the <b>Row</b> panel to display a simple table in your report. If your element is a measure (like an amount), drag it to the <b>Data</b> panel to have more options.
                            </div>
                            <div class="bs-callout bs-callout-danger">
                                If you are not familiar with cross tables, please check "Cross Table" or "Excel Pivot Table" on the internet to learn what is a cross table, a dimension and a measure.
                            </div>
                            <p>
                                Once chosen, the element can have a custom <code>Name</code>, and <code>Sort Order</code>.<br>
                                The sort priority is the following: First <b>Page</b> elements, then <b>Row/Column</b> elements  and finally <b>Data</b> elements.<br>

                                In addition, the element <code>Data Type</code> and <code>Format</code> can be modified to change the display result.<br />
                            </p>
                            <p><strong>Properties for Data element</strong></p>
                            <ul>
                                <li>
                                    <code>Aggregate</code> to choose which aggregation will be done: Sum, Average, Count, Min, Max.
                                </li>
                                <li>
                                    <code>Calculation Options</code> to change the display in % of the row, column or total.
                                </li>
                                <li>
                                    <code>Totals</code> to add extra line or column containing the total of the other cells in the result table.
                                </li>
                            </ul>

                            <p><strong>Advanced Properties</strong></p>
                            <ul>
                                <li>
                                    <code>Custom SQL</code> to change the default SQL used for the element (which comes from the column name).<br />
                                    By changing the SQL, you can use all SQL functions/operators/features supported by the database engine or other column of the table. Thus, formula can be defined at this level.
                                    Once modified, be sure that the new SQL generated is still correct (F8).<br />
                                </li>
                                <li>
                                    <code>Cell Script</code> to execute a razor script when the table cell is generated.<br />
                                    The script can modify cell presentation and value (<eg>e.g. Setting the font color in red if the value is negative, calculating a progression or a running total, etc.</eg>).<br />
                                    Using cell scripts can be time consuming as the script is executed for each cell of the tables generated.
                                </li>
                                <li>
                                    <code>Custom Enumerated List</code> to force an existing enumerated list to use its display and sort.
                                </li>
                            </ul>
                            <div class="bs-callout bs-callout-demo">
                                <h4>Custom SQL Samples</h4>
                                Replace <b>Orders.Amount</b> by <b>2*Orders.Amount</b> to multiply your measure by 2.<br />
                                Replace <b>Orders.Amount</b> by <b>Orders.Amount/Orders.Quantity</b> to get a unit price.<br />
                                Change <b>Country</b> by a <b>CASE WHEN Country='France' THEN 'Other' ELSE Country END</b> Clause to categorize your countries.
                            </div>
                            <div class="bs-callout bs-callout-demo">
                                <h4>Cell Script</h4>
                                <a class="btn btn-primary live-sample">Live Sample: 50-Cell Script - Progression and running totals</a><br />
                                Two columns have been added in the report model with custom Cell Script: One to calculate the Progression and the other one to calculate the Running Total.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineModels_3" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Restrictions</h4>
                            <p>
                                Restrictions are used to filter data displayed in the report result<br>
                                You can drag and drop the elements into the <b>Restrictions text</b> or into the <b>Aggregate Restrictions text</b> to add the restriction to the model.<br />

                                The <b>Restrictions text</b> is then used in the SQL WHERE Clause and the <b>Aggregate Restrictions text</b> in the SQL HAVING Clause.
                            </p>
                            <div class="bs-callout bs-callout-demo">
                                In this sample the <b>Restrictions text</b> contains the restriction on Country and the <b>Aggregate Restrictions text</b> on Amount with the Sum aggregate.
                                <pre class="brush: sql; highlight: [2,4]">
                                SELECT Country,SUM(Amount) FROM Orders 
                                WHERE Country='France' 
                                GROUP BY Country 
                                HAVING SUM(Amount)>10)
                            </pre>
                            </div>
                            <p>
                                A restriction inherits from an element, thus several properties are common: <code>Name</code>, <code>Data Type</code>, <code>Custom SQL</code>, <code>Custom Enumerated List</code>.<br />
                                The operators available for the <code>Operator</code> property depend on the element type (Text, Numeric or Date &amp; Time).
                            </p>
                            <p>
                                <strong>Date  &amp; Time keywords</strong><br />
                                If the restriction is a Date &amp; Time, keywords can be used to have value relative to the execution date time: <b>Now</b>, <b>Today</b> for the current day, <b>ThisMonth</b> for the first day of the current month, etc.<br>
                                In addition to the keyword, the value can be changed by +/- operations with a given unit (s for seconds, m for minutes, h for hours, D for Days, W for Weeks, M for Months, Q for Quarters, S for Semesters, Y for Years)
                            </p>
                            <div class="bs-callout bs-callout-demo">
                                <h4>Keywords Samples</h4>
                                <b>'Today - 1D'</b> is yesterday<br />
                                <b>'ThisMonth +1M - 1D'</b> is the end of the current month<br />
                                <b>'ThisQuarter +1Q - 1D'</b> is the end of the current quarter<br />
                                <b>'Now+1.5s -2m +3h'</b> gives the current time plus 1.5 seconds, minus 2 minutes and plus 3 hours...
                            </div>
                            <p>
                                <strong>Prompting the value at execution</strong><br />
                                When the report is executed, the restriction value can be prompted to end-user by modifying the <code>Prompt Restriction</code> property.<br />
                                In this case, the flags <code>Is Required</code> and <code>Can Change Operator</code> can be set.<br />
                            </p>
                            <p>
                                <strong>Flags 'Value only'</strong><br />
                                If the <code>Operator</code> is <b>'Value Only'</b>, the SQL generated for the restriction will not include the column name and operator and set only the value.<br />
                            </p>
                            <div class="bs-callout bs-callout-demo">
                                In the SQL, the restriction <strong>[Country Egals 'France']</strong> will be replaced by <b>Customer.Country = 'France'</b>, but if the <code>Operator</code> is set to <b>'Value only'</b>, the name of the operator is taken from <code>Operator Label</code> and the SQL generated is <b>'France'</b><br />
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineModels_4" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Charts</h4>
                            <p>
                                Charts axis and series are also defined in the report model.<br />
                                Three JavaScript Chart libraries are supported by Seal Report: <strong>Chart JS</strong>, <strong>NVD3 Chart</strong> and <strong>Plotly Chart</strong>. <br />
                                According to the library chosen, the look and functionalities are different.
                            </p>
                            <div class="bs-callout bs-callout-warning">
                                To define a simple chart, select one <b>Row/Column</b> element and set the <code>Serie Definition</code> property to <b>Axis</b>, then select a <b>Data</b> element and define the serie with <code>Chart JS Serie</code> or <code>NVD3 Serie</code> or <code>Plotly Serie</code>.
                            </div>
                            <p>
                                Instead of being an axis, a dimension can be a <b>Splitter</b> to create several series when the value changes (<eg>e.g. to create one serie per country</eg>).<br /><br />
                                For <i>Date &amp; Time</i> or <i>Numeric</i> axis element, if the flag <code>Use value for axis</code> is true, the values of the dimension element is used to build the axis values, otherwise the X values are linear.<br /><br />

                                Other properties allow to control <code>Sort Type</code> and <code>Sort Order</code> of the chart (<eg>e.g. to show the biggest Bars at the start or at the end</eg>) and to define a secondary <code>Y Axis Type</code> (<eg>e.g. to have a serie for amount for Primary Y, and another for quantities for Secondary Y shown on the same chart</eg>).
                            </p>
                            <div class="bs-callout bs-callout-demo">
                                <h4>Charts Samples</h4>
                                <a class="btn btn-primary live-sample">Live Sample: 04-Charts Gallery - Basics</a> <a class="btn btn-primary live-sample">Live Sample: 05-Charts Gallery - Advanced</a><br />
                                These two reports show different chart definitions with their renderings with the three supported libraries.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineModels_5" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>SQL Model</h4>
                            <p>
                                A <strong>SQL Model</strong> is a report model defined with a simple <b>SQL Select Statement</b> edited by the user designing the report.<br />
                                It is equivalent to creating a table with dynamic columns in the <strong>Data Source</strong> with a simplified edition.<br />
                                When the <b>SQL Select Statement</b> is modified, the elements available are updated.<br /><br />

                                The option <code>Use raw SQL</code> indicates to use directly the <b>SQL Select Statement</b> to generate the result table instead of using a 'select * from (<b>SQL Select Statement</b>) a' statement.<br />
                                In this case, aggregations, restrictions and custom SQL cannot be used.<br /><br />

                                Note that the <b>SQL Select Statement</b> may contain <a href="Sources.cshtml#lineTables_3">Common Restrictions</a>.<br />

                                <div class="bs-callout bs-callout-warning">
                                    <h4>Converting a model</h4>
                                    A <b>SQL Model</b> cannot not have join to other tables defined in the <strong>Data Source</strong>, however you can convert a <b>SQL Model</b> to a normal <b>MetaData Model</b>.<br />
                                    In this case, a new table is create in the <strong>Data Source</strong> and the model elements refer to this new table.<br /><br />
                                    You can also convert a <b>MetaData Model</b> to a <b>SQL Model</b>, the SQL generated for the model will be then used for the <b>SQL Select Statement</b>. This may be useful to customize the SELECT generated for a report.<br /><br />
                                    <i>Just right click on your model in the TreeView to show the conversion popup menu</i>.
                                </div>
                            </p>
                            <div class="bs-callout bs-callout-demo">
                                <h4>SQL Model Sample</h4>
                                <a class="btn btn-primary live-sample">Live Sample: 08-SQL Model - Common Restrictions</a><br />
                                This report shows a simple SQL Model based on the query of the Northwind database sample.<br />
                                A Common Restriction and a Common Value are defined in the SQL and prompted at execution.
                            </div>
                        </div>
                    </div>
                    <!-- end row -->
                </section>
                <!-- end section -->
                <section id="lineViews" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Views <hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                <strong>Views</strong> are used to generate the report result from the models results.<br />
                                A view is implemented as a Razor script that will be compiled and executed when rendering the report.<br />
                                A view references a <b>View Template</b>. The template defines the default razor script and the view parameters.<br />
                                The script and the parameters can be customized per view.<br />
                            </p>
                            <p>
                                To be executed, a report has at least a root view referencing the <b>Report Template</b>.<br />
                                A view can have children views, the rendering starts from the root view and ends at the last child views (from top to bottom).<br />
                                After the execution of the view, the HTML or the text generated is appended to the report result.<br />

                                A view has several parameters to change the rendering (<eg>e.g. changing the legend position in a chart, add CSS styles, etc.</eg>).<br />
                                The parameters are defined in the view template configuration file. They may have different purposes and depends on the components/items handled by the view.
                            </p>
                            <p>
                                <strong>Model Views</strong><br />
                                Certain views reference a model, in the case the rendering is done using the model results.<br>
                                When executed, a report model has a report model result: one summary table and several result pages. Each page has a Page Table, a Data Table and Chart Series.<br />
                                Thus , there are dedicated views to render these results.
                            </p>
                            <div class="bs-callout bs-callout-warning">
                                <h4>Customize your rendering</h4>
                                If necessary, the view scripts can be customized to get the rendering you want.<br />
                                Set the <code>Use custom template</code> flag to true and edit the <code>Custom template property</code>.<br />
                                If the view has <b>Partial Templates</b>, you can modify them using the <code>Custom Partial Templates</code> collection.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineViews_1" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Templates</h4>
                            <p>
                                All <b>View Templates</b> are defined in files located in the <i>/Views</i> Repository sub-folder.<br>
                                Here is the list of the current view templates supported:
                            </p>
                            <ul>
                                <li><b>Report</b>: Root view containing all the code necessary for the report execution.</li>
                                <li><b>Model</b>: Main view to display a model. Its children are dedicated to view each part of the model result: Page tables, Data tables, Charts, KPI.</li>
                                <li><b>Model Detail</b>: Show a model as a detailed record. This view works for a model result having a single record.</li>
                                <li><b>Container</b>: A grid container (refer to Bootstrap 3 grid at <a href="https://getbootstrap.com/docs/3.4/css/#grid" target="_blank">https://getbootstrap.com/docs/3.4/css/#grid</a>). </li>
                                <li><b>Tab Control</b>: A Tab Control container. Only Tab Page children can be defined from this view.</li>
                                <li><b>Tab Page</b>: Container for a given page of the parent Tab Control. The name of the view is used for the Tab.</li>
                                <li><b>Free</b>: Empty view that can be used freely to add HTML or text during the rendering.</li>
                            </ul>
                            <p>
                                From a Model view, the following children are supported and are applied per page result:
                            </p>
                            <ul>
                                <li><b>Page Table</b>: Render the Page table of the page result.</li>
                                <li><b>Data Table</b>: Render the Data table of the page result</li>
                                <li><b>Chart JS:</b> Render the Chart JS Series of the page result</li>
                                <li><b>NVD3 Chart</b>: Render the NVD3 Series of the page result</li>
                                <li><b>Plotly Chart</b>: Render the Plotly Series of the page result</li>
                                <li><b>KPI</b>: Display a Key Performance Indicator. The KPI is built from a data table result with at least 2 columns: 1 for the dimension, 1 for the measure (with optionals columns to define the goal if the column name has the _GOAL suffix).</li>
                                <li><b>Model Container</b>: A grid container for the page result (refer to Bootstrap 3 grid at <a href="https://getbootstrap.com/docs/3.4/css/#grid" target="_blank">https://getbootstrap.com/docs/3.4/css/#grid</a>). </li>
                            </ul>

                            <div class="bs-callout bs-callout-warning">
                                Try some useful parameters of a <b>Report</b> View:
                                <ul>
                                    <li><code>Report Format</code> to choose the result format: HTML, CSV, HTML Print, Excel, PDF</li>
                                    <li><code>Display: Execution Messages</code> to control the messages panel of the report result. Use <b>Messages enabled and shown</b> for a report having only tasks.</li>
                                    <li><code>Display: Restrictions per row</code> to configure how many prompted restrictions are displayed per row.</li>
                                    <li><code>Options: Force Execution</code> to execute the report even if a restriction is prompted.</li>
                                    <li><code>Options: Auto-Refresh</code> to re-execute automatically the reports every xx seconds.</li>
                                </ul>
                                Other useful parameters of a <b>Data Table</b> View:
                                <ul>
                                    <li><code>Options: Invert data table</code> to swap the columns and rows of the data table from their original presentation.</li>
                                </ul>
                            </div>

                            <div class="bs-callout bs-callout-warning">
                                <h4>Create your own View Template</h4>
                                It is easy to create your own view templates.<br />
                                Just add two  *.cshtml files in the <i>/Views</i> Repository sub-folder: one for the main script and one for the configuration.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineViews_2" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Widget Publication for Dashboards</h4>
                            <p>
                                To be able to display a view in a <b>Dashboard</b>, it has to be published as a <b>Widget</b>.<br />
                                Just expand the <code>Widget Definition</code> property and set a  <code>Name</code>, the view is then published and will be available to be published manually or through the <b>Dashboard Manager</b>.<br />
                                Several properties allow to configure the <b>Widget</b> default look and behavior  (<eg>e.g. Default height and width, auto-refresh rate, etc.</eg>).
                            </p>
                            <div class="bs-callout bs-callout-warning">
                                <h4>Edit your dashboards manually</h4>
                                To add the <b>Widget</b> to one of your <b>Dashboard</b>, just edit the dashboard definition file (*.sdax) located in the <i>/Dashboards</i> Repository sub-folder with a text editor.<br />
                                Then cut and paste the <code>Dashboard XML</code> text into the <b>&lt;Items&gt;</b> XML tag.
                            </div>
                            <div class="bs-callout bs-callout-demo">
                                Here is a basic dashboard definition file having one widget item:
                                <pre class="brush: xml; highlight: [6,7,8]">
                                    &lt;?xml version="1.0" encoding="utf-8" ?>
                                    &lt;Dashboard xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                                    &lt;GUID>97adfacd-de4e-437e-a6bd-709797a89345&lt;/GUID>
                                    &lt;Name>A Dashboard Name&lt;/Name>
                                    &lt;Items>
                                        &lt;DashboardItem>
                                            &lt;WidgetGUID>f1178eee-fe6c-4263-bf64-1499a69c8a53&lt;/WidgetGUID>
                                        &lt;/DashboardItem>
                                    &lt;/Items>
                                    &lt;/Dashboard>                                    
</pre>
                            </div>
                            <div class="bs-callout bs-callout-warning">
                                <h4>Widgets Navigation</h4>
                                From the <b>Report Designer</b>, use the <srmenu>Tools->Go to next widget in the report</srmenu> menu to navigate between the different Widgets published contained in the report.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                </section>
                <!-- end section -->
                <section id="lineOutput" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Outputs and Schedules<hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                A <strong>Report Output</strong> defines how to generate the report result of a root <strong>View</strong> to an <strong>Output Device</strong> (Folder or Email).<br />
                                A report can have several outputs on different devices.<br>
                            </p>
                            <p>
                                The execution of an output can differs from the normal report execution in several ways:<br />
                                <code>Custom restrictions</code> to specialize the restriction values of the report.<br />
                                <code>Custom view parameters</code> to change the parameter values of the root view (<eg>e.g. Changing the format to CSV for the output</eg>).<br />
                                <code>Culture</code> to change the culture (<eg>e.g. Changing from English to French</eg>).
                            </p>
                            <p>
                                <strong>Conditional generation</strong><br />
                                If <code>Cancel generation if no records</code> is set to <b>true</b>, the output generation is cancelled if the result set has no records.<br />
                                <code>Pre/Post-generation scripts</code> can be defined and executed before and after the generation.<br />
                                The <code>Pre-generation script</code> allows also to cancel the output generation when more complex conditions are met.
                            </p>
                            <p>
                                <strong>Security</strong><br />
                                As an output can be scheduled and executed by the <b>Task Scheduler</b>, you can define particular security context using the <code>User name</code> and <code>User Groups</code> properties.<br />
                                In this case, the user name and groups are used to execute the output. This may be useful if you have defined dynamic security based on user name or groups.
                            </p>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineOutput_1" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Devices</h4>
                            <p>
                                A <strong>Device</strong> is used to define a <b>Report Output</b>.<br />
                                Two types of devices are supported:
                            </p>
                            <ul>
                                <li>
                                    <b>Folder</b>: To generate the report result into a file on the file system.<br />
                                    The Folder device is always available.
                                </li>
                                <li>
                                    <b>Email</b>: To send the report result by email through a SMTP server.<br />
                                    Email devices are edited and configured using the <b>Server Manager</b> and are stored in a file (*.scfx) in the <i>/Devices/EMail</i> Repository sub-folder.<br />
                                    The configuration contains all parameters required to send an email through a SMTP server.
                                </li>
                            </ul>
                            <div class="bs-callout bs-callout-danger">
                                Make sure that you have created one <strong>Email Device</strong> with the flag <code>Used for notification</code> to <b>true</b> to allow schedule notifications.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineOutput_2" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Schedules</h4>
                            <p>
                                A <b>Schedule</b> is a regular execution of a report output.<br />
                                The execution is done through the standard Windows Task Scheduler via the batch executable <b>Task Scheduler</b>.<br />
                                All the schedules can be managed by the <b>MMC (Microsoft Management Console) Task Scheduler</b> under the dedicated folder <b>Seal Report</b>.<br />
                                A report output can have several schedules.<br />
                                Several properties allow the configuration of the notifications and fail-over procedure (<eg>e.g. an email sent in case of success or failure, the execution can be retried several times, etc.</eg>).
                            </p>
                            <div class="bs-callout bs-callout-danger">
                                <h4>Check users and synchronization</h4>
                                A Schedule is created by a Windows Users (the one running the <strong>Report Designer</strong> or the <strong>Web Report Server</strong>) but can be executed by another Windows User.<br />
                                Be sure that the Windows User has the <b>rights</b> to execute the report and process the output.<br /><br />
                                You can synchronize schedules from the Server Manager if reports have been moved/copied with the Windows Explorer.<br />
                                Just run the <b>Server Manager</b> in Administrator mode and select the menu <srmenu>Tools->Synchronize Report Schedules...</srmenu>.
                            </div>
                            <div class="bs-callout bs-callout-warning">
                                <h4>Define alerts</h4>
                                Alert and regular checks can be easily implemented using a report and a schedule.<br />
                                Create a SQL Select statement that detects an anomaly in your database.<br />
                                Just create a report output on an email address with the option <code>Cancel generation if no records</code> and schedule it regularly (<eg>e.g. every 15 minutes</eg>).<br />
                                Every 15 minutes, the reports is executed, if a record is returned, an email will be sent.
                            </div>
                            <div class="bs-callout bs-callout-info">
                                To change the default folder name containing the schedules, run the <strong>Server Manager</strong> and select the menu <srmenu>Configuration->Configure Server...</srmenu>, then modify the <code>Task Folder Name</code> property.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                </section>
                <section id="lineTasks" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Tasks <hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                A <strong>Report Task</strong> is a SQL or a Razor Script executed before the report models are loaded and the report result is generated.<br />
                                A task references one <strong>Data Source</strong> and on <strong>Connection</strong>.<br />
                                A report can have several tasks executed sequentially from the top to the bottom.<br />
                                If a task is a Razor Script, it can stop the report execution by returning the "0" value or by setting the <code>CancelReport</code> flag to true.<br /> Thus, simple workflows can be implemented with tasks (<eg>e.g if a given condition fails, the report is cancelled</eg>).<br />
                                Using the <code>Execute for each connection</code> property, a task can be executed for all connections defined in the <strong>Data Source</strong>.<br /><br />

                                As Tasks executes a Razor Script, they can reference, instantiate and use objects from any .Net Assemblies located in the <strong>/Assemblies</strong> Repository sub-folder.<br />
                            </p>
                            <div class="bs-callout bs-callout-info">
                                <h4>Schedule your tasks</h4>
                                As tasks are part of the report, they can be scheduled as a normal report, even if the model has no element.<br />
                                In the tree view, right click on the <b>Schedules</b> node and select the menu <b>Add Schedule for Report Tasks</b>.
                            </div>

                            <div class="bs-callout bs-callout-demo">
                                <h4>Tasks Samples</h4>
                                Check the Repository Samples from the <strong>/Reports/Samples</strong> Repository sub-folder:
                                <ul>
                                    <li>30-Task Refresh Enumerated Lists</li>
                                    <li>31-Task Backup SQLServer Database</li>
                                    <li>32-Task Load Excel Table in SQLServer Database</li>
                                    <li>33-Task Load Table in SQLServer Database</li>
                                    <li>34-Task Generate several Report Results</li>
                                    <li>35-Task Search Reports</li>
                                </ul>
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                </section>
                <!-- end section -->
                <section id="lineInputs" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Input Values <hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                To prompt a value to the user before executing the tasks or before executing a report, you can define <code>Report Input Values</code> (<eg>e.g. prompt a value before building a temporary table that will be used in the models</eg>).<br />
                                This collection property is available in the root <b>Views</b> folder node of the main Tree View.<br />
                                Like <b>Common Value</b>, the restriction will be prompted when the report is executed and the value can be used in the tasks or in other scripts used to generate the report result..<br />
                                The value prompted can be either a text, a numeric, a date time or values of an enumerated list.<br />
                            </p>
                            <div class="bs-callout bs-callout-demo">
                                Task script to display the report input values:
                                <pre class="brush: csharp; highlight: [5,6,7]">
@@using Seal.Model
@@{
	ReportTask task = Model;
    Report report = task.Report;
    foreach (ReportRestriction restr in report.InputValues) {
        report.LogMessage("[{0}]={1} Value={2}", restr.DisplayNameEl, restr.DisplayText, restr.FirstValue); //You can use restr.Value1, restr.FinalDate1, restr.EnumValues[0], restr.EnumDisplayValue, restr.FirstStringValue, restr.FirstNumericValue, restr.FirstDateValue
    }
}
                                </pre>
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="bs-callout bs-callout-demo">
                        <h4>Input Values Samples</h4>
                        <a class="btn btn-primary live-sample">Live Sample: 51-Input Values - Connection and threshold</a><br />
                        This reports shows the use of 2 input values.
                    </div>
                </section>
                <!-- end section -->
                <section id="lineConverter" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">PDF and Excel Converter <hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                The <b>Excel and PDF Converter</b> is a commercial component available at <a href="https://ariacom.com" target="_blank">https://ariacom.com</a> that allow the generation of the report result in native PDF and Excel files.
                            </p>
                            <div class="bs-callout bs-callout-warning">
                                Download the <a href=" https://ariacom.com/sealdemodownload.cshtml" target="_blank">Evaluation Version</a> of the Converter and start converting...<br />
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineConverter_1" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>PDF Converter</h4>
                            <p>
                                The <b>PDF Converter</b> render the Print View of an HTML Result into a single PDF document (*.pdf).<br />
                                Thus the HTML Print layout will be the PDF layout.<br />
                                In the root View, several properties are available to configure the document generation (<eg>e.g. margin, password, document information, etc.</eg>)<br /><br />
                                The generation can also be customized using two dedicated scripts in the root View:<br />
                                The <code>PDF Converter Script</code> is used to configure the PDF Converter before the document conversion (<eg>e.g. configuring the header or the footer, etc.</eg>).<br />
                                The <code>PDF Document Script</code> is used to modify the PDF Document after its generation (<eg>e.g. writing additional text, images, etc.</eg>).
                            </p>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div id="lineConverter_2" class="row" style="padding-top:35px">
                        <div class="col-md-12">
                            <h4>Excel Converter</h4>
                            <p>
                                The <b>Excel Converter</b> allows to generate the report result in a native Excel file (*.xlsx).<br />
                                The document generation is done by the execution of several scripts defined in the views.<br />
                                Their executions follows the rendering order: From the top view to the bottom.<br />
                            </p>

                            <div class="bs-callout bs-callout-info">
                                <h4>Execution steps for the root view</h4>
                                From the root <b>Report View</b>, the <code>Root Script: Main</code> executes the following steps:
                                <ul>
                                    <li>Execution of the <code>Root Script: Configuration</code> script to configure the converter</li>
                                    <li>Execution of the <code>Root Script: Header</code> script to create the document header.</li>
                                    <li>Creation of the document.</li>
                                    <li>Parsing of all children views and execution of theirs <code>View Script: Main</code> script.</li>
                                    <li>Cleanup and final options.</li>
                                </ul>
                            </div>
                            <br />
                            <div class="bs-callout bs-callout-info">
                                <h4>Execution steps for a child view</h4>
                                From a child <b>View</b>, the <code>View Script: Main</code> executes the following steps:
                                <ul>
                                    <li>Execution of the <code>View Script: Configuration</code> script to change configurations from this view.</li>
                                    <li>Execution of the <code>View Script: Header</code> script to create a header for the view.</li>
                                    <li>If the view has a model, execution of the <code>View Script: Summary table</code> script to generate the summary table of the model.</li>
                                    <li>If the view has a model, for each page of the model result, execution of the <code>View Script: Page table</code>, <code>View Script: Chart</code> and <code>View Script: Data table</code> scripts to process the different components of the page result.</li>
                                    <li>Parsing of all children views and execution of theirs <code>View Script: Main</code> script.</li>
                                </ul>
                            </div>
                            <p>
                                Note that all the view scripts can be modified globally in the root <b>Report View</b> using the <code>Reference Script:</code> properties.
                            </p>


                            <div class="bs-callout bs-callout-warning">
                                <h4>Default Converter Values</h4>
                                All default values of the converter component can be modified with the <b>Server Manager</b> in the Server configuration.<br />
                                <ck>Check <a href="Server.cshtml#lineConfiguration">Server Configuration</a> for more information</ck>.
                            </div>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                </section>
                <!-- end section -->
                <section id="lineCopy" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Smart Copy <hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                When using the <b>Report Designer</b>, the <strong>Smart Copy</strong> feature can be used to ease the report edition.<br />
                                It allows the copy of property values from a source object to several destinations objects (<eg>e.g. applying the same restrictions values to all models, setting the same parameter value to several views, etc.</eg>).<br />
                                In addition, the <strong>Smart Copy</strong> can copy a source object to several destinations objects (<eg>e.g. copying a model in another report, copying an element to another model, etc.</eg>).

                            </p>
                            <div class="bs-callout bs-callout-info">
                                The <strong>Smart Copy</strong> is available on most of the objects edited in a report: Task, Model, View, Output. Just right click on the object in the Tree View to show the popup menu.<br /><br />
                                You can also use the <strong>Smart Copy</strong> when editing a report model: Just right click on a report <b>element</b> or <b>restriction</b> to show the popup menu.
                            </div>
                            <div class="bs-callout bs-callout-warning">
                                <h4>Find and replace using Notepad</h4>
                                As all Seal Report files are XML, you can easily edit them with your favorite <b>NotePad</b> and use its find/replace features.<br />
                                Just save the file and reload the Report (or the Data Source) to check your modifications.<br />
                                This may be also useful to copy MetData, change Data Source GUID, etc.
                            </div>
                            <!-- end col -->
                        </div>
                        <!-- end row -->
                </section>
                <section id="lineExecution" class="section">
                    <div class="row">
                        <div class="col-md-12 left-align">
                            <h2 class="dark-text">Execution Steps <hr></h2>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                    <div class="row">
                        <div class="col-md-12">
                            <p>
                                When a report is executed, the following process is done.
                            </p>

                            <h4>Step 1: Execute Report Tasks</h4>
                            <p>
                                Tasks are executed sequentially (SQL or C# Script) from the top to the bottom.<br />
                                If a task has a razor script returning <b>"0"</b>, the report is cancelled.
                            </p>

                            <h4>
                                Step 2: Build Models
                            </h4>
                            <p>
                                Models are executed in parallel (one model per thread).<br>
                                For each model:
                            </p>
                            <ul>
                                <li>
                                    Fill the model result table (<em><strong>DataTable</strong></em>)<br>
                                    If SQL Source: Run the '<em>Pre Load Script</em>' if any, build SQL, query the database, run the '<em>Post Load Script</em>' if any.<br>
                                    If No SQL Source: Build table definition using table source '<em>Definition Script</em>' and load it using either  the table source '<em>Default Load Script</em>' or the model '<em>Load Script</em>'.
                                </li>
                                <li>Build the model pages: Create the pages (<em><strong>ResultPage</strong></em>) containing the page table (<em><strong>ResultTable</strong></em>) and data table (<em><strong>ResultTable</strong></em>)</li>
                                <li>Create the model Summary Table (<em><strong>ResultTable</strong></em>)</li>
                                <li>Process the totals in the result tables</li>
                                <li>Handle the '<em>Cell Script</em>' for each cell (<em><strong>ResultCell</strong></em>) in the Data tables and then in the Summary table.</li>
                                <li>Calculate the series (this involves calls to '<em>Cell Script</em>' if any)</li>
                                <li>Perform final sort.</li>
                                <li>Execute any '<em>Final Script</em>' defined in the models.</li>
                            </ul>
                            <h4>Step 3: Render Views</h4>
                            <p>Sequentially render report views from the root Report View to generate the result (from top to bottom).</p>

                            <h4>Step 4: Process Output</h4>
                            <p>If any, process the output defined for the execution.</p>
                            <ul>
                                <li>Check if the '<em>Pre Execution Script</em>' returns '0' or option to cancel if no records</li>
                                <li>Execute the output on the selected Device</li>
                                <li>Execute the '<em>Post Execution Script</em>'</li>
                            </ul>
                        </div>
                        <!-- end col -->
                    </div>
                    <!-- end row -->
                </section>
            </div>
            <!-- // end .col -->
        </div>
    </div>
    <!-- // end container -->
</div>
<!-- end wrapper -->

@section scripts {
    <script>
        $(document).ready(function () {
            $("#reports_nav").addClass("active");
        });
    </script>}
