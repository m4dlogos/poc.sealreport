<?xml version="1.0" encoding="utf-8"?><Report xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><GUID>b2b97abe-e393-4012-bb69-e31eaf5ba6cd</GUID><Sources><ReportSource><GUID>05a70759-8290-41fa-a1fc-6ca4f103a5b3</GUID><Name>Data Source</Name><Connections><MetaConnection><GUID>bc5de208-7159-4885-9351-8c2d3cd86a44</GUID><Name>connection</Name><ConnectionString>Provider=SQLOLEDB;data source=localhost;initial catalog=adb;Integrated Security=SSPI;</ConnectionString></MetaConnection></Connections><ConnectionGUID>bc5de208-7159-4885-9351-8c2d3cd86a44</ConnectionGUID><IsNoSQL>true</IsNoSQL><MetaData><Tables><MetaTable><GUID>03f8a584-0dd2-463f-bc51-80b47d297f93</GUID><DefinitionScript>@using Seal.Model&#xD;
@using System.Data&#xD;
@{&#xD;
    MetaTable metaTable = Model;&#xD;
	ReportExecutionLog log = metaTable;&#xD;
&#xD;
    //Script executed to define the result table columns that will be loaded by the 'Load Script'&#xD;
    //Note that other assemblies can be used by saving the .dll in the Repository 'Assemblies' sub-folder...&#xD;
    DataTable table = new DataTable();&#xD;
    table.Columns.Add(new DataColumn("Label", typeof(string)));&#xD;
    table.Columns.Add(new DataColumn("Serie", typeof(string)));&#xD;
    table.Columns.Add(new DataColumn("Value", typeof(int)));&#xD;
    metaTable.NoSQLTable = table;&#xD;
    log.LogMessage("{0} column(s) defined", table.Columns.Count);&#xD;
}&#xD;
</DefinitionScript><LoadScript>@using Seal.Model&#xD;
@using System.Data&#xD;
@{&#xD;
    MetaTable metaTable = Model;&#xD;
    DataTable table = metaTable.NoSQLTable;&#xD;
	ReportExecutionLog log = metaTable;&#xD;
    ReportModel reportModel = metaTable.NoSQLModel;&#xD;
    Report report = (reportModel != null ? reportModel.Report : null);&#xD;
&#xD;
    //Default Script executed to fill the model result table from a non SQL source (if the model 'Load Script' is empty)&#xD;
    //Insert values in the table, values must match the table columns defined in 'Definition Script'&#xD;
    //Note that other assemblies can be used by saving the .dll in the Repository 'Assemblies' sub-folder...&#xD;
    log.LogMessage("Adding table rows with the default table 'Load Script'...");&#xD;
    table.Rows.Add("1D", "Euribor", 2);&#xD;
    table.Rows.Add("1D", "Libor", 1);&#xD;
    table.Rows.Add("1W", "Euribor", 3);&#xD;
    table.Rows.Add("1W", "Libor", 2);&#xD;
    log.LogMessage("{0} record(s) loaded", table.Rows.Count);&#xD;
}&#xD;
</LoadScript><Alias>SealMasterTable</Alias><DynamicColumns>true</DynamicColumns><Columns><MetaColumn><GUID>bd7b8a76-8730-47fd-9068-6cad525c4251</GUID><Name>Value</Name><Type>Numeric</Type><Category>Master</Category><DisplayName>Value</DisplayName><DisplayOrder>2</DisplayOrder><Format>N0</Format></MetaColumn><MetaColumn><GUID>0e448fd2-57f9-461b-b3d7-f8de1ed28b16</GUID><Name>Serie</Name><Type>Text</Type><Category>Master</Category><DisplayName>Serie</DisplayName><DisplayOrder>5</DisplayOrder></MetaColumn><MetaColumn><GUID>89d89a5b-6cc4-48d9-8a15-6ba8f4806b80</GUID><Name>Label</Name><Type>Text</Type><Category>Master</Category><DisplayName>Label</DisplayName><DisplayOrder>6</DisplayOrder></MetaColumn></Columns></MetaTable></Tables></MetaData></ReportSource></Sources><Models><ReportModel><GUID>e59441c5-4819-4eee-a07e-b8f00f0e1139</GUID><Name>Model</Name><SourceGUID>05a70759-8290-41fa-a1fc-6ca4f103a5b3</SourceGUID><LoadScript>@using Seal.Model&#xD;
@using System.Data&#xD;
@{&#xD;
    ReportModel model = Model;&#xD;
    DataTable table = model.ResultTable;&#xD;
	ReportExecutionLog log = model.Report;&#xD;
&#xD;
    //Script executed to fill the model result table from a non SQL source&#xD;
    //Insert values in the table, values must match the table columns defined in the source table 'Definition Script'&#xD;
    //Note that other assemblies can be used by saving the .dll in the Repository 'Assemblies' sub-folder...&#xD;
    log.LogMessage("Adding table rows with the model 'Load Script'...");&#xD;
    table.Rows.Add("1D", "Euribor", 2);&#xD;
    table.Rows.Add("1D", "Libor", 1);&#xD;
    table.Rows.Add("1W", "Euribor", 3);&#xD;
    table.Rows.Add("1W", "Libor", 2);&#xD;
    log.LogMessage("{0} record(s) loaded", table.Rows.Count);&#xD;
}&#xD;
</LoadScript><Elements><ReportElement><GUID>a7eb3fc9-0593-4428-80d3-0918dbd3744d</GUID><Name>Value</Name><DisplayName /><Format>N0</Format><PivotPosition>Data</PivotPosition><ChartJSSerie>Bar</ChartJSSerie><MetaColumnGUID>bd7b8a76-8730-47fd-9068-6cad525c4251</MetaColumnGUID></ReportElement><ReportElement><GUID>2f177807-6e50-4496-8490-1f1f44ecf786</GUID><Name>Serie</Name><DisplayName /><PivotPosition>Column</PivotPosition><AggregateFunction>Count</AggregateFunction><SerieDefinition>Splitter</SerieDefinition><MetaColumnGUID>0e448fd2-57f9-461b-b3d7-f8de1ed28b16</MetaColumnGUID></ReportElement><ReportElement><GUID>5ea68737-19cd-445b-83ce-da8dfb049ca6</GUID><Name>Label</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><SerieDefinition>Axis</SerieDefinition><MetaColumnGUID>89d89a5b-6cc4-48d9-8a15-6ba8f4806b80</MetaColumnGUID></ReportElement></Elements></ReportModel><ReportModel><GUID>e1cfa74c-24e5-490e-a085-0bc0dda546f6</GUID><Name>Model2</Name><SourceGUID>05a70759-8290-41fa-a1fc-6ca4f103a5b3</SourceGUID><LoadScript>@using Seal.Model&#xD;
@using System.Data&#xD;
@{&#xD;
    ReportModel model = Model;&#xD;
    DataTable table = model.ResultTable;&#xD;
	ReportExecutionLog log = model.Report;&#xD;
&#xD;
    //Script executed to fill the model result table from a non SQL source&#xD;
    //Insert values in the table, values must match the table columns defined in the source table 'Definition Script'&#xD;
    //Note that other assemblies can be used by saving the .dll in the Repository 'Assemblies' sub-folder...&#xD;
    log.LogMessage("Adding table rows with the model 'Load Script'...");&#xD;
    table.Rows.Add("1D", "Euribor", 2);&#xD;
    table.Rows.Add("1W", "Euribor", 3);&#xD;
    log.LogMessage("{0} record(s) loaded", table.Rows.Count);&#xD;
}&#xD;
</LoadScript><Elements><ReportElement><GUID>db82e64f-47fd-4856-b57d-72053a7ad965</GUID><Name>Label</Name><DisplayName /><PivotPosition>Row</PivotPosition><AggregateFunction>Count</AggregateFunction><SerieDefinition>Axis</SerieDefinition><MetaColumnGUID>89d89a5b-6cc4-48d9-8a15-6ba8f4806b80</MetaColumnGUID></ReportElement><ReportElement><GUID>a0fec5c2-ff70-42e1-9265-eed5e9d78a83</GUID><Name>Value</Name><DisplayName /><Format>N0</Format><PivotPosition>Data</PivotPosition><ChartJSSerie>Pie</ChartJSSerie><MetaColumnGUID>bd7b8a76-8730-47fd-9068-6cad525c4251</MetaColumnGUID></ReportElement></Elements></ReportModel></Models><Views><ReportView><GUID>2863714e-955a-4a50-bdc1-b8a59ea9d205</GUID><Name>View</Name><Views><ReportView><GUID>609cc08a-af15-4e3b-859c-7667d81379f6</GUID><Name>Model</Name><Views><ReportView><GUID>2d3316c7-3e72-4c31-899f-beaad327e74d</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>e59441c5-4819-4eee-a07e-b8f00f0e1139</ModelGUID><Parameters><Parameter><Name>show_summary_table</Name><Value>False</Value></Parameter><Parameter><Name>print_break_after_page</Name><Value>True</Value></Parameter></Parameters><SortOrder>1</SortOrder></ReportView><ReportView><GUID>6b6773b0-f562-493e-aa0a-49210b0df717</GUID><Name>Model2</Name><Views><ReportView><GUID>39c17f68-5c02-4982-b6ca-2011951fdedd</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>e1cfa74c-24e5-490e-a085-0bc0dda546f6</ModelGUID><Parameters><Parameter><Name>show_summary_table</Name><Value>False</Value></Parameter><Parameter><Name>print_break_after_page</Name><Value>True</Value></Parameter></Parameters><SortOrder>2</SortOrder></ReportView></Views><TemplateName>Report</TemplateName><Parameters><Parameter><Name>report_format</Name><Value>pdf</Value></Parameter><Parameter><Name>additional_js</Name><Value>Chart.plugins.register({&#xD;
	id:'doughnutWithText',&#xD;
	afterDraw: function(chart, ease) {&#xD;
		if (chart.config.type == 'doughnut')&#xD;
		{&#xD;
			var ctx = chart.chart.ctx;&#xD;
			ctx.save();&#xD;
&#xD;
			ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontFamily, 'normal', Chart.defaults.global.defaultFontFamily);&#xD;
			ctx.textAlign = 'center';&#xD;
			ctx.textBaseline = 'bottom';&#xD;
			chart.data.datasets.forEach(function (dataset) {&#xD;
&#xD;
			for (var i = 0; i &lt; dataset.data.length; i++) {&#xD;
				var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model,&#xD;
					total = dataset._meta[Object.keys(dataset._meta)[0]].total,&#xD;
					mid_radius = model.innerRadius + (model.outerRadius - model.innerRadius)/2,&#xD;
					start_angle = model.startAngle,&#xD;
					end_angle = model.endAngle,&#xD;
					mid_angle = start_angle + (end_angle - start_angle)/2;&#xD;
&#xD;
					var x = mid_radius * Math.cos(mid_angle);&#xD;
					var y = mid_radius * Math.sin(mid_angle);&#xD;
&#xD;
					ctx.fillStyle = '#fff';&#xD;
					if (i == 3){ // Darker text color for lighter background&#xD;
						ctx.fillStyle = '#444';&#xD;
					}&#xD;
					//var percent = String(Math.round(dataset.data[i]/total*100)) + "%";      &#xD;
					//Don't Display If Legend is hide or value is 0&#xD;
					if(dataset.data[i] != 0 &amp;&amp; dataset._meta[Object.keys(dataset._meta)[0]].data[i].hidden != true) {&#xD;
						ctx.fillText(dataset.data[i], model.x + x, model.y + y);&#xD;
						// Display percent in another line, line break doesn't work for fillText&#xD;
						//ctx.fillText(percent, model.x + x, model.y + y + 15);&#xD;
					}&#xD;
				}&#xD;
			});&#xD;
&#xD;
			&#xD;
			&#xD;
			ctx.fillStyle = '#333333';&#xD;
			ctx.textBaseline = 'middle';&#xD;
			ctx.textAlign = 'center';&#xD;
			var model = chart.data.datasets[0]._meta[Object.keys(chart.data.datasets[0]._meta)[0]].data[0]._model;&#xD;
			var total = chart.data.datasets[0]._meta[Object.keys(chart.data.datasets[0]._meta)[0]].total;&#xD;
			var firstValue = chart.data.datasets[0].data[0];&#xD;
			var percent = Number(firstValue/total).toLocaleString(undefined,{style: 'percent', minimumFractionDigits:0});&#xD;
			&#xD;
			let fontSize = Math.floor(model.innerRadius * 0.7);&#xD;
			ctx.font = fontSize + 'px arial';&#xD;
			let textHeight = parseInt(ctx.font);&#xD;
			var maxWidth = (2*model.innerRadius)*0.7;&#xD;
			&#xD;
			ctx.fillText(percent, model.x, model.y, maxWidth);&#xD;
			&#xD;
			fontSize = fontSize*0.6;&#xD;
			ctx.font = fontSize + 'px ariral';&#xD;
			ctx.fillText(chart.data.labels[0], model.x, model.y + textHeight*0.7, maxWidth);&#xD;
&#xD;
			ctx.restore();&#xD;
		}&#xD;
	}&#xD;
&#xD;
	&#xD;
});</Value></Parameter></Parameters><SortOrder>1</SortOrder><PdfConfigurations><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;PdfConverterCfg xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;HtmlViewerWidth&gt;1024&lt;/HtmlViewerWidth&gt;&#xD;
  &lt;HtmlViewerHeight&gt;0&lt;/HtmlViewerHeight&gt;&#xD;
  &lt;HtmlViewerZoom&gt;100&lt;/HtmlViewerZoom&gt;&#xD;
  &lt;ClipHtmlView&gt;true&lt;/ClipHtmlView&gt;&#xD;
  &lt;JavaScriptEnabled&gt;true&lt;/JavaScriptEnabled&gt;&#xD;
  &lt;Enable3DTransformations&gt;false&lt;/Enable3DTransformations&gt;&#xD;
  &lt;EnableWebGL&gt;false&lt;/EnableWebGL&gt;&#xD;
  &lt;EnableAccelerated2DCanvas&gt;false&lt;/EnableAccelerated2DCanvas&gt;&#xD;
  &lt;EnablePersistentStorage&gt;false&lt;/EnablePersistentStorage&gt;&#xD;
  &lt;LocalFilesAccessEnabled&gt;true&lt;/LocalFilesAccessEnabled&gt;&#xD;
  &lt;SvgFontsEnabled&gt;false&lt;/SvgFontsEnabled&gt;&#xD;
  &lt;WebFontsEnabled&gt;true&lt;/WebFontsEnabled&gt;&#xD;
  &lt;PostScriptFontsEnabled&gt;true&lt;/PostScriptFontsEnabled&gt;&#xD;
  &lt;ExtensionsEnabled&gt;false&lt;/ExtensionsEnabled&gt;&#xD;
  &lt;DownloadAllResources&gt;false&lt;/DownloadAllResources&gt;&#xD;
  &lt;PrerenderEnabled&gt;true&lt;/PrerenderEnabled&gt;&#xD;
  &lt;InterruptSlowJavaScript&gt;false&lt;/InterruptSlowJavaScript&gt;&#xD;
  &lt;MaxHtmlViewerHeight&gt;0&lt;/MaxHtmlViewerHeight&gt;&#xD;
  &lt;MinHtmlViewerHeight&gt;0&lt;/MinHtmlViewerHeight&gt;&#xD;
  &lt;InitialHtmlViewerHeight&gt;0&lt;/InitialHtmlViewerHeight&gt;&#xD;
  &lt;DefaultHtmlEncoding /&gt;&#xD;
  &lt;ImagePartSize&gt;32000&lt;/ImagePartSize&gt;&#xD;
  &lt;TriggeringMode&gt;ConversionDelay&lt;/TriggeringMode&gt;&#xD;
  &lt;ConversionDelay&gt;15&lt;/ConversionDelay&gt;&#xD;
  &lt;ManualTriggeringConversionDelay&gt;2&lt;/ManualTriggeringConversionDelay&gt;&#xD;
  &lt;NavigationTimeout&gt;60&lt;/NavigationTimeout&gt;&#xD;
  &lt;PersistentHttpRequestHeaders&gt;true&lt;/PersistentHttpRequestHeaders&gt;&#xD;
  &lt;XPSupplementalLanguages&gt;false&lt;/XPSupplementalLanguages&gt;&#xD;
&lt;/PdfConverterCfg&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;PdfDocumentOptions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;AutoCloseExternalDocs&gt;true&lt;/AutoCloseExternalDocs&gt;&#xD;
  &lt;LeftMargin&gt;10&lt;/LeftMargin&gt;&#xD;
  &lt;RightMargin&gt;10&lt;/RightMargin&gt;&#xD;
  &lt;TopMargin&gt;10&lt;/TopMargin&gt;&#xD;
  &lt;BottomMargin&gt;10&lt;/BottomMargin&gt;&#xD;
  &lt;X&gt;0&lt;/X&gt;&#xD;
  &lt;Y&gt;0&lt;/Y&gt;&#xD;
  &lt;Width&gt;-1&lt;/Width&gt;&#xD;
  &lt;Height&gt;-1&lt;/Height&gt;&#xD;
  &lt;TopSpacing&gt;0&lt;/TopSpacing&gt;&#xD;
  &lt;BottomSpacing&gt;0&lt;/BottomSpacing&gt;&#xD;
  &lt;BackColor /&gt;&#xD;
  &lt;PdfCompressionLevel&gt;Normal&lt;/PdfCompressionLevel&gt;&#xD;
  &lt;JpegCompressionEnabled&gt;true&lt;/JpegCompressionEnabled&gt;&#xD;
  &lt;JpegCompressionLevel&gt;10&lt;/JpegCompressionLevel&gt;&#xD;
  &lt;CompressCrossReference&gt;false&lt;/CompressCrossReference&gt;&#xD;
  &lt;PdfPageSize&gt;&#xD;
    &lt;Width&gt;595&lt;/Width&gt;&#xD;
    &lt;Height&gt;842&lt;/Height&gt;&#xD;
  &lt;/PdfPageSize&gt;&#xD;
  &lt;PdfStandardSubset&gt;Full&lt;/PdfStandardSubset&gt;&#xD;
  &lt;ColorSpace&gt;RGB&lt;/ColorSpace&gt;&#xD;
  &lt;ColorProfile&gt;Custom&lt;/ColorProfile&gt;&#xD;
  &lt;FitWidth&gt;true&lt;/FitWidth&gt;&#xD;
  &lt;FitHeight&gt;false&lt;/FitHeight&gt;&#xD;
  &lt;StretchToFit&gt;false&lt;/StretchToFit&gt;&#xD;
  &lt;SinglePage&gt;false&lt;/SinglePage&gt;&#xD;
  &lt;AutoSizePdfPage&gt;true&lt;/AutoSizePdfPage&gt;&#xD;
  &lt;AvoidTextBreak&gt;true&lt;/AvoidTextBreak&gt;&#xD;
  &lt;AvoidImageBreak&gt;false&lt;/AvoidImageBreak&gt;&#xD;
  &lt;PdfPageOrientation&gt;Portrait&lt;/PdfPageOrientation&gt;&#xD;
  &lt;ShowHeader&gt;false&lt;/ShowHeader&gt;&#xD;
  &lt;ShowFooter&gt;false&lt;/ShowFooter&gt;&#xD;
  &lt;EmbedFonts&gt;true&lt;/EmbedFonts&gt;&#xD;
  &lt;LiveUrlsEnabled&gt;true&lt;/LiveUrlsEnabled&gt;&#xD;
  &lt;InteractiveHiddenElements&gt;false&lt;/InteractiveHiddenElements&gt;&#xD;
  &lt;InternalLinksEnabled&gt;true&lt;/InternalLinksEnabled&gt;&#xD;
  &lt;TiledRenderingEnabled&gt;true&lt;/TiledRenderingEnabled&gt;&#xD;
  &lt;EnhancedGraphicsQuality&gt;true&lt;/EnhancedGraphicsQuality&gt;&#xD;
  &lt;TransparentImagesEnabled&gt;true&lt;/TransparentImagesEnabled&gt;&#xD;
  &lt;ImagesScalingEnabled&gt;false&lt;/ImagesScalingEnabled&gt;&#xD;
  &lt;NoSizeElementsEnabled&gt;false&lt;/NoSizeElementsEnabled&gt;&#xD;
  &lt;TransparencyEnabled&gt;true&lt;/TransparencyEnabled&gt;&#xD;
  &lt;TableHeaderRepeatEnabled&gt;true&lt;/TableHeaderRepeatEnabled&gt;&#xD;
  &lt;TableFooterRepeatEnabled&gt;true&lt;/TableFooterRepeatEnabled&gt;&#xD;
  &lt;StackRepeatedTableHeaders&gt;true&lt;/StackRepeatedTableHeaders&gt;&#xD;
  &lt;StackRepeatedTableFooters&gt;true&lt;/StackRepeatedTableFooters&gt;&#xD;
&lt;/PdfDocumentOptions&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;PdfSecurityOptions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;CanAssembleDocument&gt;true&lt;/CanAssembleDocument&gt;&#xD;
  &lt;CanCopyContent&gt;true&lt;/CanCopyContent&gt;&#xD;
  &lt;CanCopyAccessibilityContent&gt;true&lt;/CanCopyAccessibilityContent&gt;&#xD;
  &lt;CanEditAnnotations&gt;true&lt;/CanEditAnnotations&gt;&#xD;
  &lt;CanEditContent&gt;true&lt;/CanEditContent&gt;&#xD;
  &lt;CanFillFormFields&gt;true&lt;/CanFillFormFields&gt;&#xD;
  &lt;CanPrint&gt;true&lt;/CanPrint&gt;&#xD;
  &lt;CanPrintHighResolution&gt;true&lt;/CanPrintHighResolution&gt;&#xD;
  &lt;KeySize&gt;EncryptKey128Bit&lt;/KeySize&gt;&#xD;
  &lt;EncryptionAlgorithm&gt;RC4&lt;/EncryptionAlgorithm&gt;&#xD;
  &lt;OwnerPassword /&gt;&#xD;
  &lt;UserPassword /&gt;&#xD;
&lt;/PdfSecurityOptions&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;PdfHeaderOptions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;HeaderBackColor /&gt;&#xD;
  &lt;HeaderHeight&gt;40&lt;/HeaderHeight&gt;&#xD;
  &lt;PageNumberingStartIndex&gt;0&lt;/PageNumberingStartIndex&gt;&#xD;
  &lt;PageNumberingPageCountIncrement&gt;0&lt;/PageNumberingPageCountIncrement&gt;&#xD;
&lt;/PdfHeaderOptions&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;PdfFooterOptions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;FooterBackColor /&gt;&#xD;
  &lt;FooterHeight&gt;20&lt;/FooterHeight&gt;&#xD;
  &lt;PageNumberingStartIndex&gt;0&lt;/PageNumberingStartIndex&gt;&#xD;
  &lt;PageNumberingPageCountIncrement&gt;0&lt;/PageNumberingPageCountIncrement&gt;&#xD;
&lt;/PdfFooterOptions&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;PdfDocumentInfo xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;CreatedDate&gt;0001-01-01T00:00:00&lt;/CreatedDate&gt;&#xD;
&lt;/PdfDocumentInfo&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;PdfBookmarkOptions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;AutoBookmarksEnabled&gt;false&lt;/AutoBookmarksEnabled&gt;&#xD;
  &lt;HierarchicalBookmarks&gt;true&lt;/HierarchicalBookmarks&gt;&#xD;
  &lt;AllowDefaultTitle&gt;true&lt;/AllowDefaultTitle&gt;&#xD;
  &lt;DefaultTitle&gt;Bookmark&lt;/DefaultTitle&gt;&#xD;
  &lt;MaxTitleLength&gt;-1&lt;/MaxTitleLength&gt;&#xD;
&lt;/PdfBookmarkOptions&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;ViewerPreferences xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;HideToolbar&gt;false&lt;/HideToolbar&gt;&#xD;
  &lt;HideMenuBar&gt;false&lt;/HideMenuBar&gt;&#xD;
  &lt;HideWindowUI&gt;false&lt;/HideWindowUI&gt;&#xD;
  &lt;FitWindow&gt;false&lt;/FitWindow&gt;&#xD;
  &lt;CenterWindow&gt;false&lt;/CenterWindow&gt;&#xD;
  &lt;DisplayDocTitle&gt;false&lt;/DisplayDocTitle&gt;&#xD;
  &lt;NonFullScreenPageMode&gt;UseNone&lt;/NonFullScreenPageMode&gt;&#xD;
  &lt;Direction&gt;L2R&lt;/Direction&gt;&#xD;
  &lt;PageMode&gt;UseNone&lt;/PageMode&gt;&#xD;
  &lt;PageLayout&gt;OneColumn&lt;/PageLayout&gt;&#xD;
&lt;/ViewerPreferences&gt;</string><string>&lt;?xml version="1.0" encoding="utf-16"?&gt;&#xD;
&lt;SealPdfCfg xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;&#xD;
  &lt;ConverterScript&gt;@using Winnovative&#xD;
@using SealPdfConverter&#xD;
@using System.Drawing&#xD;
@using System.IO&#xD;
@{		&#xD;
	//Full documentation of the converter at http://www.winnovative-software.com/Help/html_to_pdf/Index.aspx&#xD;
	SealPdfConverter.PdfConverter converterModel = Model;&#xD;
	Seal.Model.ReportView view = converterModel.View;&#xD;
	Winnovative.PdfConverter converter = converterModel.Converter;&#xD;
	&#xD;
	// Header &#xD;
    converter.PdfDocumentOptions.ShowHeader = true;&#xD;
	var headerImagePath = Path.Combine(view.Report.Repository.ViewImagesFolder, view.Report.Repository.Configuration.LogoName);&#xD;
	if (System.IO.File.Exists(headerImagePath)) {&#xD;
		ImageElement headerImage =  new ImageElement(0, 0, headerImagePath);&#xD;
		converter.PdfHeaderOptions.AddElement(headerImage);&#xD;
	}&#xD;
	else {&#xD;
		TextElement logoText = new TextElement(0, 0, view.Report.Repository.Configuration.WebProductName, new Font(new System.Drawing.FontFamily("Arial"), 12, FontStyle.Italic, GraphicsUnit.Point));&#xD;
		logoText.TextAlign = HorizontalTextAlign.Left;&#xD;
		logoText.EmbedSysFont = true;&#xD;
		converter.PdfHeaderOptions.AddElement(logoText);&#xD;
	}&#xD;
&#xD;
    TextElement headerText = new TextElement(0, 10, view.Report.ExecutionName, new Font(new System.Drawing.FontFamily("Arial"), 16, FontStyle.Bold | FontStyle.Italic, GraphicsUnit.Point));&#xD;
	headerText.TextAlign = (view.Report.ExecutionName.Length &amp;gt; 25 ? HorizontalTextAlign.Right : HorizontalTextAlign.Center);&#xD;
	headerText.EmbedSysFont = true;&#xD;
	converter.PdfHeaderOptions.AddElement(headerText);&#xD;
&#xD;
	float documentWidth = converter.PdfDocumentOptions.PdfPageSize.Width - converter.PdfDocumentOptions.LeftMargin - converter.PdfDocumentOptions.RightMargin;&#xD;
	if (converter.PdfDocumentOptions.PdfPageOrientation == PdfPageOrientation.Landscape) &#xD;
	{&#xD;
		documentWidth = converter.PdfDocumentOptions.PdfPageSize.Height - converter.PdfDocumentOptions.LeftMargin - converter.PdfDocumentOptions.RightMargin;&#xD;
	}&#xD;
	&#xD;
    converter.PdfDocumentOptions.PageBreakAfterHtmlElementsSelectors = new string[] { "#page_break_model_after" };&#xD;&#xD;

    // Header line &#xD;
	LineElement headerLine = new LineElement(0, converter.PdfHeaderOptions.HeaderHeight - 4, documentWidth, converter.PdfHeaderOptions.HeaderHeight - 4);&#xD;
	headerLine.ForeColor = Color.Gray;&#xD;
	converter.PdfHeaderOptions.AddElement(headerLine);	    &#xD;
&#xD;
	// Footer &#xD;
	converter.PdfDocumentOptions.ShowFooter = true;&#xD;
	TextElement footerText = new TextElement(0, 6, view.Report.Translate("Page &amp;amp;p; of &amp;amp;P;"), new Font(new System.Drawing.FontFamily("Arial"), 9, GraphicsUnit.Point));&#xD;
	footerText.TextAlign = HorizontalTextAlign.Right;&#xD;
	footerText.ForeColor = Color.Gray;&#xD;
	footerText.EmbedSysFont = true;&#xD;
	converter.PdfFooterOptions.AddElement(footerText);&#xD;
&#xD;
	TextElement footerText2 = new TextElement(0, 6, DateTime.Now.ToString("d", view.CultureInfo) + " " + DateTime.Now.ToString("t", view.CultureInfo), new Font(new FontFamily("Arial"), 9, GraphicsUnit.Point));&#xD;
	footerText2.TextAlign = HorizontalTextAlign.Left;&#xD;
	footerText2.ForeColor = Color.Gray;&#xD;
	footerText2.EmbedSysFont = true;&#xD;
	converter.PdfFooterOptions.AddElement(footerText2);	&#xD;
&#xD;
	// Footer line &#xD;
	LineElement footerLine = new LineElement(0, 4, documentWidth, 4);&#xD;
    footerLine.ForeColor = Color.Gray;&#xD;
	converter.PdfFooterOptions.AddElement(footerLine);     &#xD;
}&lt;/ConverterScript&gt;&#xD;
  &lt;DocumentScript&gt;@using Winnovative
@using SealPdfConverter
@using System.Drawing
@{		
	//Full documentation of the converter at http://www.winnovative-software.com/Help/html_to_pdf/Index.aspx
	SealPdfConverter.PdfConverter converterModel = Model;
	Seal.Model.ReportView view = converterModel.View;
	Winnovative.PdfConverter converter = converterModel.Converter;
	Winnovative.Document document = converterModel.Document;
	/* Uncomment to draw a sample text
	for (int i = 0; i &amp;lt; document.Pages.Count; i++)
	{
		PdfPage page = document.Pages[i];
		TextElement text = new TextElement(200, 300, "This is a text sample...", new System.Drawing.Font(new System.Drawing.FontFamily("Arial"), 24, System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic, System.Drawing.GraphicsUnit.Point));
		text.ForeColor = Color.Orange;
		text.TextAngle = 45;
		page.AddElement(text);
	}*/	
    
    
    
    
}&lt;/DocumentScript&gt;&#xD;
&lt;/SealPdfCfg&gt;</string></PdfConfigurations></ReportView></Views><ViewGUID>2863714e-955a-4a50-bdc1-b8a59ea9d205</ViewGUID></Report>